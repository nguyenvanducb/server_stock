package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"strconv"
	"sync"
	"time"

	"github.com/gin-gonic/gin"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"golang.org/x/sync/singleflight"
)

var mongoClient *mongo.Client

func main() {
	// Khởi tạo kết nối MongoDB một lần duy nhất
	var err error
	mongoURI := "mongodb://admin:abc123@127.0.0.1:27017/admin"
	// mongoURI := "mongodb://admin:abc123@34.124.132.235:27017/admin"
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	mongoClient, err = mongo.Connect(ctx, options.Client().ApplyURI(mongoURI))
	if err != nil {
		log.Fatalf("MongoDB connection failed: %v", err)
	}
	defer mongoClient.Disconnect(ctx)

	r := gin.Default()

	// Đăng ký các route sử dụng handler chung
	r.GET("/api/tc", getCachedHandler("moneyflow", "tc", 1000*time.Second))
	r.GET("/api/code", getCachedHandler("moneyflow", "stock_code", 10*time.Second))
	r.GET("/api/info", getCachedHandler("moneyflow", "info_stocks", 100000*time.Second))
	r.GET("/api/orders", getOrdersHandler)
	r.GET("/api/candles", getCandlesHandlerTest)

	r.Run(":8001")
}

var (
	cache sync.Map
	group singleflight.Group
)

func getCachedHandler(dbName, collName string, ttl time.Duration) gin.HandlerFunc {
	print("getCachedHandler")
	return func(c *gin.Context) {
		cacheKey := dbName + "_" + collName

		// Check cache trước
		if data, ok := cache.Load(cacheKey); ok {
			c.JSON(http.StatusOK, gin.H{"data": data})
			return
		}

		// Dùng singleflight để tránh nhiều request cùng truy vấn DB
		v, err, _ := group.Do(cacheKey, func() (interface{}, error) {
			ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
			defer cancel()

			collection := mongoClient.Database(dbName).Collection(collName)
			cursor, err := collection.Find(ctx, bson.D{})
			if err != nil {
				return nil, err
			}
			defer cursor.Close(ctx)

			var results []bson.M
			if err := cursor.All(ctx, &results); err != nil {
				return nil, err
			}

			// Lưu vào cache
			cache.Store(cacheKey, results)

			// Tạo goroutine xóa sau TTL
			go func() {
				time.Sleep(ttl)
				cache.Delete(cacheKey)
			}()

			return results, nil
		})

		// Xử lý lỗi nếu có
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
			return
		}

		// Trả dữ liệu đã được truy vấn
		c.JSON(http.StatusOK, gin.H{"data": v})
	}
}

func getOrdersHandler(c *gin.Context) {
	fmt.Println("===> getOrdersHandler called")

	symbol := c.Query("symbol")
	dateStr := c.Query("date") // dạng DD/MM/YYYY
	limitStr := c.DefaultQuery("limit", "20")
	pageStr := c.DefaultQuery("page", "1")

	if symbol == "" || dateStr == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "symbol and date are required"})
		return
	}

	// Không cần parse date nếu client gửi đúng định dạng luôn

	limit, err := strconv.Atoi(limitStr)
	if err != nil || limit <= 0 {
		limit = 20
	}
	if limit > 200 {
		limit = 200
	}

	page, err := strconv.Atoi(pageStr)
	if err != nil || page <= 0 {
		page = 1
	}
	skip := (page - 1) * limit

	filter := bson.M{
		"Symbol":      symbol,
		"TradingDate": dateStr,
	}

	collection := mongoClient.Database("moneyflow").Collection("orders")
	opts := options.Find().
		SetSort(bson.M{"Time": -1}).
		SetSkip(int64(skip)).
		SetLimit(int64(limit))

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	cursor, err := collection.Find(ctx, filter, opts)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	defer cursor.Close(ctx)

	var results []bson.M
	if err := cursor.All(ctx, &results); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"data":  results,
		"page":  page,
		"limit": limit,
	})
}
func getCandlesHandler(c *gin.Context) {
	fmt.Println("===> getCandlesHandler called")

	symbol := c.Query("symbol")
	interval := c.DefaultQuery("interval", "1m")
	limitStr := c.DefaultQuery("limit", "200")

	if symbol == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "symbol is required"})
		return
	}

	limit, err := strconv.Atoi(limitStr)
	if err != nil || limit <= 0 {
		limit = 200
	}
	if limit > 1000 {
		limit = 1000
	}

	filter := bson.M{"symbol": symbol, "interval": interval}

	collection := mongoClient.Database("binance").Collection("klines")
	opts := options.Find().
		SetSort(bson.M{"openTime": 1}).
		SetLimit(int64(limit))

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	cursor, err := collection.Find(ctx, filter, opts)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	defer cursor.Close(ctx)

	var results []bson.M
	if err := cursor.All(ctx, &results); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	// Convert to Binance format (array of arrays)
	var klineArrays [][]interface{}
	for _, doc := range results {
		klineArray := []interface{}{
			doc["openTime"],                 // 0
			doc["open"],                     // 1
			doc["high"],                     // 2
			doc["low"],                      // 3
			doc["close"],                    // 4
			doc["volume"],                   // 5
			doc["closeTime"],                // 6
			doc["quoteAssetVolume"],         // 7
			doc["numberOfTrades"],           // 8
			doc["takerBuyBaseAssetVolume"],  // 9
			doc["takerBuyQuoteAssetVolume"], // 10
			"0",                             // 11 - Ignore field
		}
		klineArrays = append(klineArrays, klineArray)
	}

	// Trả về trực tiếp array, không wrap trong object
	c.JSON(http.StatusOK, klineArrays)
}
func getCandlesHandlerTest(c *gin.Context) {
	fmt.Println("===> getCandlesHandler called")

	// symbol := c.Query("symbol")

	// if symbol == "" {
	// 	c.JSON(http.StatusBadRequest, gin.H{"error": "symbol is required"})
	// 	return
	// }

	// Test data - định nghĩa riêng để dễ đọc
	testData := [][]interface{}{
		// [OpenTime(ms), Open, High, Low, Close, Volume, CloseTime(ms), QuoteVolume, NumTrades, TakerBuyVolume, TakerBuyQuoteVolume, Ignore]

		// 100 nến từ dữ liệu TradingView (daily candles) - từ tháng 10/2024 đến 1/2025
		{1730073600000, "26.65", "27.00", "26.65", "26.80", "6128800", 1730159999999, "163906352.00", 6128, "3370840", "90148493.60", "0"},
		{1730160000000, "26.85", "27.00", "26.70", "26.70", "5358800", 1730246399999, "143180076.00", 5358, "2947340", "78749041.80", "0"},
		{1730246400000, "26.80", "26.85", "26.20", "26.35", "9615800", 1730332799999, "253612905.00", 9615, "5288690", "139487097.75", "0"},
		{1730332800000, "26.35", "26.60", "26.30", "26.60", "7085500", 1730419199999, "187372175.00", 7085, "3897025", "103054696.25", "0"},
		{1730419200000, "26.50", "26.50", "26.05", "26.20", "8377200", 1730505599999, "219569820.00", 8377, "4607460", "121663601.00", "0"},
		{1730678400000, "26.20", "26.55", "25.90", "26.25", "13413500", 1730764799999, "351894137.50", 13413, "7377425", "194041475.62", "0"},
		{1730764800000, "26.25", "26.45", "26.15", "26.15", "3203100", 1730851199999, "83716322.50", 3203, "1761705", "46043777.37", "0"},
		{1730851200000, "26.30", "26.60", "26.20", "26.45", "10676500", 1730937599999, "282471712.50", 10676, "5872075", "155159441.87", "0"},
		{1730937600000, "26.65", "26.70", "26.35", "26.35", "5991000", 1731023999999, "158813450.00", 5991, "3295050", "87347497.50", "0"},
		{1731024000000, "26.35", "26.45", "26.05", "26.10", "7720000", 1731110399999, "201628000.00", 7720, "4246000", "110895400.00", "0"},
		{1731283200000, "26.10", "26.10", "25.55", "25.70", "12696500", 1731369599999, "325857325.00", 12696, "6983075", "179221628.75", "0"},
		{1731369600000, "25.80", "26.15", "25.55", "25.70", "10035100", 1731455999999, "258301575.00", 10035, "5519305", "142065866.25", "0"},
		{1731456000000, "25.70", "25.70", "25.25", "25.45", "12418200", 1731542399999, "316464550.00", 12418, "6829010", "175455302.50", "0"},
		{1731542400000, "25.45", "25.45", "24.65", "24.70", "12754600", 1731628799999, "318865150.00", 12754, "7015030", "180375332.50", "0"},
		{1731628800000, "24.70", "24.70", "23.80", "23.95", "25501800", 1731715199999, "617543550.00", 25501, "14025990", "339649052.50", "0"},
		{1731888000000, "23.95", "24.60", "23.80", "24.30", "24877000", 1731974399999, "604711100.00", 24877, "13682350", "332590605.00", "0"},
		{1731974400000, "24.35", "24.50", "23.80", "23.85", "10705300", 1732060799999, "257567650.00", 10705, "5887915", "141661907.50", "0"},
		{1732060800000, "23.90", "24.70", "23.75", "24.30", "17961700", 1732147199999, "434924100.00", 17961, "9878935", "239208055.00", "0"},
		{1732147200000, "24.30", "24.65", "24.05", "24.60", "14195600", 1732233599999, "347388900.00", 14195, "7807580", "190863695.00", "0"},
		{1732233600000, "24.50", "24.60", "24.25", "24.35", "12804200", 1732319999999, "311824775.00", 12804, "7042310", "171503426.25", "0"},
		{1732492800000, "24.40", "24.50", "24.20", "24.50", "10156700", 1732579199999, "248589425.00", 10156, "5586185", "136424083.75", "0"},
		{1732579200000, "24.60", "24.90", "24.50", "24.60", "9334300", 1732665599999, "229952450.00", 9334, "5133865", "126473647.50", "0"},
		{1732665600000, "24.60", "24.70", "24.25", "24.30", "9322900", 1732751999999, "228562225.00", 9322, "5127595", "125709223.75", "0"},
		{1732752000000, "24.45", "24.55", "24.25", "24.30", "8460700", 1732838399999, "205675687.50", 8460, "4653385", "113121628.12", "0"},
		{1732838400000, "24.30", "24.65", "24.20", "24.55", "9018200", 1732924799999, "221197450.00", 9018, "4960010", "121658597.50", "0"},
		{1733097600000, "24.60", "24.75", "24.30", "24.45", "7836700", 1733183999999, "191551675.00", 7836, "4310185", "105853421.25", "0"},
		{1733184000000, "24.45", "24.50", "24.25", "24.30", "12527000", 1733270399999, "304582750.00", 12527, "6889850", "167520512.50", "0"},
		{1733270400000, "24.25", "24.30", "24.00", "24.05", "9139300", 1733356799999, "220319325.00", 9139, "5026615", "121675628.75", "0"},
		{1733356800000, "24.10", "25.70", "23.65", "25.70", "35613300", 1733443199999, "872526575.00", 35613, "19587315", "479889416.25", "0"},
		{1733443200000, "26.00", "26.45", "25.80", "26.35", "33824400", 1733529599999, "884477100.00", 33824, "18603420", "486362405.00", "0"},
		{1733702400000, "26.30", "26.40", "26.00", "26.20", "18860200", 1733788799999, "493776250.00", 18860, "10373110", "271576337.50", "0"},
		{1733788800000, "26.15", "26.40", "26.00", "26.25", "12619100", 1733875199999, "330699412.50", 12619, "6940505", "181634776.87", "0"},
		{1733875200000, "26.30", "26.40", "25.95", "26.15", "12560400", 1733961599999, "328209050.00", 12560, "6908220", "180514877.50", "0"},
		{1733961600000, "26.10", "26.45", "26.00", "26.00", "12180000", 1734047999999, "318708000.00", 12180, "6699000", "175289400.00", "0"},
		{1734048000000, "25.95", "26.00", "25.70", "25.80", "10969600", 1734134399999, "282606800.00", 10969, "6033280", "155433740.00", "0"},
		{1734307200000, "25.90", "26.20", "25.75", "26.10", "14599300", 1734393599999, "379482575.00", 14599, "8029615", "208715416.25", "0"},
		{1734393600000, "26.10", "26.15", "25.85", "26.00", "6199400", 1734479999999, "161184700.00", 6199, "3409670", "88601585.00", "0"},
		{1734480000000, "26.00", "26.20", "25.80", "26.20", "7203300", 1734566399999, "187486075.00", 7203, "3961815", "103117341.25", "0"},
		{1734566400000, "25.80", "26.20", "25.45", "26.20", "30712700", 1734652799999, "793530250.00", 30712, "16891985", "436441637.50", "0"},
		{1734652800000, "26.10", "26.25", "25.90", "26.25", "12287800", 1734739199999, "322485750.00", 12287, "6758290", "177167162.50", "0"},
		{1734912000000, "26.20", "26.30", "25.85", "25.85", "7842600", 1734998399999, "203706650.00", 7842, "4313430", "112038457.50", "0"},
		{1734998400000, "25.85", "25.95", "25.50", "25.95", "12299200", 1735084799999, "316890400.00", 12299, "6764560", "174289720.00", "0"},
		{1735084800000, "26.00", "26.75", "25.90", "26.55", "26221100", 1735171199999, "693210162.50", 26221, "14421605", "381265589.37", "0"},
		{1735171200000, "26.50", "26.60", "26.35", "26.35", "8764400", 1735257599999, "231253100.00", 8764, "4820420", "127389205.00", "0"},
		{1735257600000, "26.40", "26.70", "26.30", "26.60", "16346900", 1735343999999, "434027350.00", 16346, "8990795", "238865042.50", "0"},
		{1735516800000, "26.60", "26.90", "26.45", "26.45", "11494000", 1735603199999, "304972550.00", 11494, "6321700", "167734802.50", "0"},
		{1735603200000, "26.45", "26.45", "26.05", "26.05", "8234000", 1735689599999, "213687250.00", 8234, "4528700", "117527887.50", "0"},
		{1735776000000, "26.05", "26.35", "25.90", "25.95", "8938200", 1735862399999, "232242650.00", 8938, "4916010", "127633457.50", "0"},
		{1735862400000, "25.90", "25.95", "25.35", "25.35", "16065900", 1735948799999, "408681225.00", 16065, "8836245", "224774673.75", "0"},
		{1736121600000, "25.35", "25.50", "24.85", "24.90", "9985000", 1736207999999, "249625000.00", 9985, "5491750", "137293750.00", "0"},
		{1736208000000, "25.35", "25.35", "24.50", "24.55", "18563600", 1736294399999, "455890000.00", 18563, "10209980", "250739500.00", "0"},
		{1736294400000, "24.50", "24.80", "24.45", "24.70", "9134400", 1736380799999, "225422800.00", 9134, "5023920", "123982540.00", "0"},
		{1736380800000, "24.70", "24.95", "24.40", "24.40", "8907600", 1736467199999, "219237400.00", 8907, "4899180", "120580570.00", "0"},
		{1736467200000, "24.30", "24.55", "23.50", "23.70", "21372700", 1736553599999, "513176550.00", 21372, "11754985", "282147102.50", "0"},
		{1736726400000, "23.55", "24.30", "23.55", "24.15", "10836600", 1736812799999, "260081400.00", 10836, "5960130", "143744770.00", "0"},
		{1736812800000, "24.20", "24.20", "23.90", "23.95", "8104900", 1736899199999, "194617750.00", 8104, "4457695", "107289762.50", "0"},
		{1736899200000, "24.15", "24.35", "24.00", "24.15", "9867500", 1736985599999, "237827125.00", 9867, "5427125", "130704918.75", "0"},
		{1736985600000, "24.40", "25.20", "24.30", "24.40", "18541100", 1737071999999, "452503150.00", 18541, "10197605", "248876732.50", "0"},
		{1730073600000, "26.65", "27.00", "26.65", "26.80", "6128800", 1730159999999, "163906352.00", 6128, "3370840", "90148493.60", "0"},
		{1730160000000, "26.85", "27.00", "26.70", "26.70", "5358800", 1730246399999, "143180076.00", 5358, "2947340", "78749041.80", "0"},
		{1730246400000, "26.80", "26.85", "26.20", "26.35", "9615800", 1730332799999, "253612905.00", 9615, "5288690", "139487097.75", "0"},
		{1730332800000, "26.35", "26.60", "26.30", "26.60", "7085500", 1730419199999, "187372175.00", 7085, "3897025", "103054696.25", "0"},
		{1730419200000, "26.50", "26.50", "26.05", "26.20", "8377200", 1730505599999, "219569820.00", 8377, "4607460", "121663601.00", "0"},
		{1730678400000, "26.20", "26.55", "25.90", "26.25", "13413500", 1730764799999, "351894137.50", 13413, "7377425", "194041475.62", "0"},
		{1730764800000, "26.25", "26.45", "26.15", "26.15", "3203100", 1730851199999, "83716322.50", 3203, "1761705", "46043777.37", "0"},
		{1730851200000, "26.30", "26.60", "26.20", "26.45", "10676500", 1730937599999, "282471712.50", 10676, "5872075", "155159441.87", "0"},
		{1730937600000, "26.65", "26.70", "26.35", "26.35", "5991000", 1731023999999, "158813450.00", 5991, "3295050", "87347497.50", "0"},
		{1731024000000, "26.35", "26.45", "26.05", "26.10", "7720000", 1731110399999, "201628000.00", 7720, "4246000", "110895400.00", "0"},
		{1731283200000, "26.10", "26.10", "25.55", "25.70", "12696500", 1731369599999, "325857325.00", 12696, "6983075", "179221628.75", "0"},
		{1731369600000, "25.80", "26.15", "25.55", "25.70", "10035100", 1731455999999, "258301575.00", 10035, "5519305", "142065866.25", "0"},
		{1731456000000, "25.70", "25.70", "25.25", "25.45", "12418200", 1731542399999, "316464550.00", 12418, "6829010", "175455302.50", "0"},
		{1731542400000, "25.45", "25.45", "24.65", "24.70", "12754600", 1731628799999, "318865150.00", 12754, "7015030", "180375332.50", "0"},
		{1731628800000, "24.70", "24.70", "23.80", "23.95", "25501800", 1731715199999, "617543550.00", 25501, "14025990", "339649052.50", "0"},
		{1731888000000, "23.95", "24.60", "23.80", "24.30", "24877000", 1731974399999, "604711100.00", 24877, "13682350", "332590605.00", "0"},
		{1731974400000, "24.35", "24.50", "23.80", "23.85", "10705300", 1732060799999, "257567650.00", 10705, "5887915", "141661907.50", "0"},
		{1732060800000, "23.90", "24.70", "23.75", "24.30", "17961700", 1732147199999, "434924100.00", 17961, "9878935", "239208055.00", "0"},
		{1732147200000, "24.30", "24.65", "24.05", "24.60", "14195600", 1732233599999, "347388900.00", 14195, "7807580", "190863695.00", "0"},
		{1732233600000, "24.50", "24.60", "24.25", "24.35", "12804200", 1732319999999, "311824775.00", 12804, "7042310", "171503426.25", "0"},
		{1732492800000, "24.40", "24.50", "24.20", "24.50", "10156700", 1732579199999, "248589425.00", 10156, "5586185", "136424083.75", "0"},
		{1732579200000, "24.60", "24.90", "24.50", "24.60", "9334300", 1732665599999, "229952450.00", 9334, "5133865", "126473647.50", "0"},
		{1732665600000, "24.60", "24.70", "24.25", "24.30", "9322900", 1732751999999, "228562225.00", 9322, "5127595", "125709223.75", "0"},
		{1732752000000, "24.45", "24.55", "24.25", "24.30", "8460700", 1732838399999, "205675687.50", 8460, "4653385", "113121628.12", "0"},
		{1732838400000, "24.30", "24.65", "24.20", "24.55", "9018200", 1732924799999, "221197450.00", 9018, "4960010", "121658597.50", "0"},
		{1733097600000, "24.60", "24.75", "24.30", "24.45", "7836700", 1733183999999, "191551675.00", 7836, "4310185", "105853421.25", "0"},
		{1733184000000, "24.45", "24.50", "24.25", "24.30", "12527000", 1733270399999, "304582750.00", 12527, "6889850", "167520512.50", "0"},
		{1733270400000, "24.25", "24.30", "24.00", "24.05", "9139300", 1733356799999, "220319325.00", 9139, "5026615", "121675628.75", "0"},
		{1733356800000, "24.10", "25.70", "23.65", "25.70", "35613300", 1733443199999, "872526575.00", 35613, "19587315", "479889416.25", "0"},
		{1733443200000, "26.00", "26.45", "25.80", "26.35", "33824400", 1733529599999, "884477100.00", 33824, "18603420", "486362405.00", "0"},
		{1733702400000, "26.30", "26.40", "26.00", "26.20", "18860200", 1733788799999, "493776250.00", 18860, "10373110", "271576337.50", "0"},
		{1733788800000, "26.15", "26.40", "26.00", "26.25", "12619100", 1733875199999, "330699412.50", 12619, "6940505", "181634776.87", "0"},
		{1733875200000, "26.30", "26.40", "25.95", "26.15", "12560400", 1733961599999, "328209050.00", 12560, "6908220", "180514877.50", "0"},
		{1733961600000, "26.10", "26.45", "26.00", "26.00", "12180000", 1734047999999, "318708000.00", 12180, "6699000", "175289400.00", "0"},
		{1734048000000, "25.95", "26.00", "25.70", "25.80", "10969600", 1734134399999, "282606800.00", 10969, "6033280", "155433740.00", "0"},
		{1734307200000, "25.90", "26.20", "25.75", "26.10", "14599300", 1734393599999, "379482575.00", 14599, "8029615", "208715416.25", "0"},
		{1734393600000, "26.10", "26.15", "25.85", "26.00", "6199400", 1734479999999, "161184700.00", 6199, "3409670", "88601585.00", "0"},
		{1734480000000, "26.00", "26.20", "25.80", "26.20", "7203300", 1734566399999, "187486075.00", 7203, "3961815", "103117341.25", "0"},
		{1734566400000, "25.80", "26.20", "25.45", "26.20", "30712700", 1734652799999, "793530250.00", 30712, "16891985", "436441637.50", "0"},
		{1734652800000, "26.10", "26.25", "25.90", "26.25", "12287800", 1734739199999, "322485750.00", 12287, "6758290", "177167162.50", "0"},
		{1734912000000, "26.20", "26.30", "25.85", "25.85", "7842600", 1734998399999, "203706650.00", 7842, "4313430", "112038457.50", "0"},
		{1734998400000, "25.85", "25.95", "25.50", "25.95", "12299200", 1735084799999, "316890400.00", 12299, "6764560", "174289720.00", "0"},
		{1735084800000, "26.00", "26.75", "25.90", "26.55", "26221100", 1735171199999, "693210162.50", 26221, "14421605", "381265589.37", "0"},
		{1735171200000, "26.50", "26.60", "26.35", "26.35", "8764400", 1735257599999, "231253100.00", 8764, "4820420", "127389205.00", "0"},
		{1735257600000, "26.40", "26.70", "26.30", "26.60", "16346900", 1735343999999, "434027350.00", 16346, "8990795", "238865042.50", "0"},
		{1735516800000, "26.60", "26.90", "26.45", "26.45", "11494000", 1735603199999, "304972550.00", 11494, "6321700", "167734802.50", "0"},
		{1735603200000, "26.45", "26.45", "26.05", "26.05", "8234000", 1735689599999, "213687250.00", 8234, "4528700", "117527887.50", "0"},
		{1735776000000, "26.05", "26.35", "25.90", "25.95", "8938200", 1735862399999, "232242650.00", 8938, "4916010", "127633457.50", "0"},
		{1735862400000, "25.90", "25.95", "25.35", "25.35", "16065900", 1735948799999, "408681225.00", 16065, "8836245", "224774673.75", "0"},
		{1736121600000, "25.35", "25.50", "24.85", "24.90", "9985000", 1736207999999, "249625000.00", 9985, "5491750", "137293750.00", "0"},
		{1736208000000, "25.35", "25.35", "24.50", "24.55", "18563600", 1736294399999, "455890000.00", 18563, "10209980", "250739500.00", "0"},
		{1736294400000, "24.50", "24.80", "24.45", "24.70", "9134400", 1736380799999, "225422800.00", 9134, "5023920", "123982540.00", "0"},
		{1736380800000, "24.70", "24.95", "24.40", "24.40", "8907600", 1736467199999, "219237400.00", 8907, "4899180", "120580570.00", "0"},
		{1736467200000, "24.30", "24.55", "23.50", "23.70", "21372700", 1736553599999, "513176550.00", 21372, "11754985", "282147102.50", "0"},
		{1736726400000, "23.55", "24.30", "23.55", "24.15", "10836600", 1736812799999, "260081400.00", 10836, "5960130", "143744770.00", "0"},
		{1736812800000, "24.20", "24.20", "23.90", "23.95", "8104900", 1736899199999, "194617750.00", 8104, "4457695", "107289762.50", "0"},
		{1736899200000, "24.15", "24.35", "24.00", "24.15", "9867500", 1736985599999, "237827125.00", 9867, "5427125", "130704918.75", "0"},
		{1736985600000, "24.40", "25.20", "24.30", "24.40", "18541100", 1737071999999, "452503150.00", 18541, "10197605", "248876732.50", "0"}}

	c.JSON(http.StatusOK, testData)
}
